
#substitutions:
#  name: incubator

#packages:
#  Bundas77.incubator: github://Bundas77/incubator/incubator.yaml@main

esphome:
  name: "incubator"
  name_add_mac_suffix: false
  friendly_name: Incubator
  

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "c9XrrWouyrkulX3OXNfrmbj+p2zqyaHkHEntldZAyDU="

ota:
  password: "698fb270762e8f62893c8c55de8cfe37"
  #dashboard_import:
  #package_import_url: github://Bundas77/incubator/incubator.yaml@main
  #import_full_config: true

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Incubator Fallback Hotspot"
    password: "ms13aBnebMlt"

captive_portal:

  
  #on_boot:
  #  then:
  #    - if:
  #        condition:
  #          lambda: return id(has_key);
  #        then:
  #          - lambda: |-
  #              std::string key(id(stored_decryption_key), 32);
  #              id(dsmr_instance).set_decryption_key(key);
  #        else:
  #          - logger.log:
  #              level: info
  #              format: "Not using decryption key. If you need to set a key use Home Assistant service 'ESPHome:  ${device_name}_set_dsmr_key'"
  

time:
  - platform: homeassistant
    id: homeassistant_time 

# Enable I2C for SSD1306 OLED display
i2c:
  sda: GPIO5
  scl: GPIO4
# Enable OneWire for DS18B20 temperature sensors
dallas:
  - pin: GPIO16

# Enable sensors
sensor:
  - platform: dallas
    address: 0x123456789ABC  # Replace with your actual sensor address
    name: "Egg Temperature"
    id: "egg_temp"
#    dallas_id: d1
#        filters:
#      - calibrate_linear:
#          - 0.0 -> 0.0
#          - 1.0 -> 1.0  # Adjust calibration values as needed

  - platform: bme280
    temperature:
      name: "Incubator Temperature"
      id: temp280
      oversampling: 16x
      filters:
        - calibrate_linear:
            - 0.0 -> 0.0
            - 1.0 -> 1.0  # Adjust calibration values as needed
    humidity:
      name: "Incubator Humidity"
      id: hum280
      filters:
        - calibrate_linear:
            - 0.0 -> 0.0
            - 1.0 -> 1.0  # Adjust calibration values as needed
    pressure:
      name: "Ambient Pressure"
      id: pres280
      filters:
        - calibrate_linear:
            - 0.0 -> 0.0
            - 1.0 -> 1.0  # Adjust calibration values as needed
    address: 0x77
    update_interval: 2s

  - platform: template
    name: "Altitude"
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(temp280).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(pres280).state), 0.190234) - 1); // in meter
    update_interval: 15s
    icon: 'mdi:signal'
    unit_of_measurement: 'm'
  - platform: absolute_humidity
    name: "Absolute Humidity"
    temperature: temp280
    humidity: hum280
  - platform: template
    name: "Dew Point"
    lambda: |-
     return (243.5*(log(id(hum280).state/100)+((17.67*id(temp280).state)/
     (243.5+id(temp280).state)))/(17.67-log(id(hum280).state/100)-
     ((17.67*id(temp280).state)/(243.5+id(temp280).state))));
    unit_of_measurement: °C
    icon: 'mdi:thermometer-alert'
      

# Enable switches
switch:
  - platform: gpio
    pin: GPIO12
    name: "Heating Relay"

  - platform: gpio
    pin: GPIO13
    name: "Fan"

# Enable servo
output:
  - platform: ledc
    pin: GPIO14
    id: servo_pwm
    frequency: 50 Hz
    min_power: 5.0%    # 5% at 50Hz is 1mS  (20mS cycles)
    max_power: 10.0%   # 10% at 50Hz is 2mS (20mS cycles)

#  - platform: ledc
#    id: servo
#    output: servo_pwm
#    min_level: 5%
#    max_level: 10%
#    idle_level: 7.5%
#    frequency: 50 Hz

# Enable display
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: display1
    
    pages:
      - id: page1
        lambda: |-
          it.set_font("Roboto-Regular.ttf", 10);
          it.printf(0, 0, id(font12), "Days Left: %d", id(days_left).state);
      - id: page2
        lambda: |-
         it.set_font("Roboto-Regular.ttf", 10);
         it.printf(0, 0, id(font12), "Egg Temp: %.1f C", id(egg_temp).state);
      - id: page3
        lambda: |-
         it.set_font("Roboto-Regular.ttf", 10);
          it.printf(0, 0, id(font12), "Ambient Temp: %.1f C", id(temp280).state);
      - id: page4
        lambda: |-
         it.set_font("Roboto-Regular.ttf", 10);
         it.printf(0, 0, id(font12), "Ambient Humidity: %.1f %%", id(hum280).state);
      - id: page5
        lambda: |-
       it.set_font("Roboto-Regular.ttf", 10);
          it.printf(0, 0, id(font12), "Ambient Pressure: %.1f hPa", id(pres280).state);
      - id: page6
#        lambda: |-
#          it.set_font("Roboto-Regular.ttf", 10);
#          it.print(0, 0, id(font12), id(scrolling_text).state.c_str());
    update_interval: 4s

font:
  - file: "gfonts://Roboto"
    id: font12
    size: 12

# Set up countdown timer
#sensor:
#  - platform: time
#    id: current_time
#    on_value_range:
#      - if:
#          condition:
#            and:
#              - lambda: return x.days >= 0
#              - lambda: return x.days <= 21
#          then:
#            - lambda: id(days_left) = 21 - id(current_time).days

# Button for turning eggs
#binary_sensor:
#  - platform: gpio
#    pin:
#      number: 0
#      mode: INPUT_PULLUP
#      inverted: True
#    name: "Egg Turn Button"
#    on_press:
#      then:
#        - servo.write_angle:
#            id: servo
#            angle: 90°
#        - delay: 500ms
#        - servo.write_angle:
#            id: servo
#            angle: 0°

# Reminder for adding water
#sensor:
#  - platform: template
#    name: "Water Reminder"
#    lambda: |-
#      if (id(ambient_humidity).state < 50.0) {
#        return "Add Water!";
#      } else {
#        return "";
#      }

# Temperature, humidity, and pressure calibration settings in Home Assistant
#homeassistant:
#  temperature:
#    - name: "Incubator Temperature"
#      id: temp_calibration
#    - name: "Ambient Temperature"
#      id: ambient_temp_calibration
#  humidity:
#    - name: "Ambient Humidity"
#      id: humidity_calibration
#  pressure:
#    - name: "Ambient Pressure"
#      id: pressure_calibration

# Adjust temperature control based on the stage of incubation
#interval:
#  - interval: 10s
#    then:
#      - if:
#          condition:
#            lambda: return id(days_left) <= 5
#          then:
#            - switch.turn_on: heating_relay
#            - if:
#                condition:
#                  lambda: return id(egg_temp).state > 37.0
#                then:
#                  - switch.turn_on: fan
#                else:
#                  - switch.turn_off: fan
#          else:
#            - if:
#                condition:
#                  lambda: return id(egg_temp).state > 38.0
#                then:
#                  - switch.turn_on: fan
#                  - switch.turn_off: heating_relay
#                else:
#                  - switch.turn_on: heating_relay
#                  - switch.turn_off: fan
