
substitutions:
#  name: incubator

#packages:
#  Bundas77.incubator: github://Bundas77/incubator/incubator.yaml@main

  devicename: incubator
  
  buzzer_pin: GPIO15 #alarm
  dallas_pin: GPIO16 # dalla 18b20 temp one wire
  scl_pin: GPIO4 
  sda_pin: GPIO5 
  servo_pin: GPIO9 #Servo controler for turning eggs
  fan_pin: GPIO11
#  battery_pin: GPIO11 
#  ldr_pin: GPIO35 
#  left_button_pin: GPIO26 
#  mid_button_pin: GPIO27 
#  right_button_pin: GPIO14 


esphome:
  name: "incubator"
  name_add_mac_suffix: false
  friendly_name: Incubator
  

esp32:
  board: esp32dev
  framework:
    type: arduino

web_server:
  port: 80

# Enable logging
logger:
  level: VERBOSE

# Enable Home Assistant API
api:
  encryption:
    key: "c9XrrWouyrkulX3OXNfrmbj+p2zqyaHkHEntldZAyDU="


ota:
  platform: esphome
  password: "698fb270762e8f62893c8c55de8cfe37"
  #dashboard_import:
  #package_import_url: github://Bundas77/incubator/incubator.yaml@main
  #import_full_config: true


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Incubator Fallback Hotspot"
    password: "ms13aBnebMlt"

captive_portal:


#Type off egg, (default value)
#Start temp 38 (default value)
#Lower temp on day X (default value) to X (default value)
#Stop turning eggs on day X (default value)
#Days to hatch X (default value)
#Start day X (default value)
#Days left X




time:
  - platform: homeassistant
    id: homeassistant_time 

# Enable I2C for SSD1306 OLED display
i2c:
  sda: $sda_pin
  scl: $scl_pin
# Enable OneWire for DS18B20 temperature sensors
one_wire:
  - platform: gpio
    pin: $dallas_pin
    #update_interval: 1s

# Alarm output
output:
  - platform: ledc
    pin: $buzzer_pin
    id: alarm_buzzer
    frequency: "1000Hz"
    channel: 0

  - platform: ledc  
    id: pwm_output
    pin: $servo_pin
    frequency: "50 Hz"
    channel: 2
    
# Enable sensors
sensor:

# Example configuration entry
#sensor:
  - platform: esp32_hall
    name: "ESP32 Hall Sensor"
    update_interval: 60s



#WiFi Signal Sensor
  - platform: wifi_signal
    name: gateway wifi signal
    update_interval: 30s
    unit_of_measurement: "dBa"
    accuracy_decimals: 0

  - platform: internal_temperature
    name: "Internal Temperature"

  - platform: dallas_temp
#    temperature:
    address: 0x1c0000089c070728  # Replace with your actual sensor address
    name: "Egg Temperature1"
    id: "egg_temp"
    resolution: 12
  #  dallas_id: egg
    filters:
      - offset: 0.4
#      - multiply: 1.2
#      - calibrate_linear:
#          - 0.0 -> 0.0
#          - 1.0 -> 1.0  # Adjust calibration values as needed
#          - 21 -> 0.0


  - platform: dallas_temp
    address: 0x2e012213ce4cc528  # Replace with your actual sensor address
    name: "Egg Temperature2"
    id: "egg_temp2"
    resolution: 12
  #  dallas_id: egg
    filters:
      - offset: 1.7
#      - multiply: 1.2
#      - calibrate_linear:
#          - 0.0 -> 0.0
#          - 1.0 -> 1.0  # Adjust calibration values as needed
        
  - platform: dallas_temp
    address: 0xf100000403764c28  # Replace with your actual sensor address
    name: "Egg Temperature3"
    id: "egg_temp3"
    resolution: 12
  #  dallas_id: egg
    filters:
      - offset: 1.2
#      - multiply: 1.2
#      - calibrate_linear:
#          - 0.0 -> 0.0
#          - 1.0 -> 1.0  # Adjust calibration values as needed
              

  - platform: bme280_i2c
    temperature:
      name: "Incubator Temperature"
      id: temp280
      oversampling: 16x
      filters:
        - offset: 1.2
#        - calibrate_linear:
#            - 0.0 -> 0.0
#            - 1.0 -> 1.0  # Adjust calibration values as needed
    humidity:
      name: "Incubator Humidity"
      id: hum280
      filters:
#        - calibrate_linear:
#            - 0.0 -> 0.0
#            - 1.0 -> 1.0  # Adjust calibration values as needed
    pressure:
      name: "Ambient Pressure"
      id: pres280
      filters:
#        - calibrate_linear:
#            - 0.0 -> 0.0
#            - 1.0 -> 1.0  # Adjust calibration values as needed

    address: 0x76
    update_interval: 1s

  - platform: template
    name: "Altitude"
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(temp280).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(pres280).state), 0.190234) - 1); // in meter
    update_interval: 15s
    icon: 'mdi:signal'
    unit_of_measurement: 'm'

  - platform: absolute_humidity
    name: "Absolute Humidity"
    temperature: temp280
    humidity: hum280

  - platform: template
    name: "Dew Point"
    lambda: |-
     return (243.5*(log(id(hum280).state/100)+((17.67*id(temp280).state)/
     (243.5+id(temp280).state)))/(17.67-log(id(hum280).state/100)-
     ((17.67*id(temp280).state)/(243.5+id(temp280).state))));
    unit_of_measurement: °C
    icon: 'mdi:thermometer-alert'
      


servo:
  - id: my_servo
    output: pwm_output
    transition_length: 2.0s



number:
  - platform: template
    name: Servo Control
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    on_value:
      then:
        - servo.write:
            id: my_servo
            level: !lambda 'return x / 100.0;'
            


# Enable display
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: display1
    
    pages:
  #   - id: page1
  #     lambda: |-
  #       it.set_font("Roboto-Regular.ttf", 10);
  #       it.printf(0, 0, id(font12), "Days Left: %d", id(days_left).state);
     - id: page2
       lambda: |-
        
        it.printf(0, 0, id(font12), "Egg Temp: %.1f C", id(egg_temp).state);
     - id: page3
       lambda: |-
        
        it.printf(0, 0, id(font12), "Ambient Temp: %.1f C", id(temp280).state);
     - id: page4
       lambda: |-
        
        it.printf(0, 0, id(font12), "Ambient Humidity: %.1f %%", id(hum280).state);
     - id: page5
       lambda: |-
        
        it.printf(0, 0, id(font12), "Ambient Pressure: %.1f hPa", id(pres280).state);
#     - id: page6
#        lambda: |-
#          it.set_font("Roboto-Regular.ttf", 10);
#          it.print(0, 0, id(font12), id(scrolling_text).state.c_str());
    update_interval: 4s

font:
  - file: "fonts/Roboto-Regular.ttf"
    id: font12
    size: 12

# Set up countdown timer
#sensor:
#  - platform: time
#    id: current_time
#    on_value_range:
#      - if:
#          condition:
#            and:
#              - lambda: return x.days >= 0
#              - lambda: return x.days <= 21
#          then:
#            - lambda: id(days_left) = 21 - id(current_time).days

# Button for turning eggs
#binary_sensor:
#  - platform: gpio
#    pin:
#      number: 0
#      mode: INPUT_PULLUP
#      inverted: True
#    name: "Egg Turn Button"
#    on_press:
#      then:
#        - servo.write_angle:
#            id: servo
#            angle: 90°
#        - delay: 500ms
#        - servo.write_angle:
#            id: servo
#            angle: 0°

# Reminder for adding water
#sensor:
#  - platform: template
#    name: "Water Reminder"
#    lambda: |-
#      if (id(ambient_humidity).state < 50.0) {
#        return "Add Water!";
#      } else {
#        return "";
#      }

# Temperature, humidity, and pressure calibration settings in Home Assistant
#homeassistant:
#  temperature:
#    - name: "Incubator Temperature"
#      id: temp_calibration
#    - name: "Ambient Temperature"
#      id: ambient_temp_calibration
#  humidity:
#    - name: "Ambient Humidity"
#      id: humidity_calibration
#  pressure:
#    - name: "Ambient Pressure"
#      id: pressure_calibration

# Adjust temperature control based on the stage of incubation
#interval:
#  - interval: 10s
#    then:
#      - if:
#          condition:
#            lambda: return id(days_left) <= 5
#          then:
#            - switch.turn_on: heating_relay
#            - if:
#                condition:
#                  lambda: return id(egg_temp).state > 37.0
#                then:
#                  - switch.turn_on: fan
#                else:
#                  - switch.turn_off: fan
#          else:
#            - if:
#                condition:
#                  lambda: return id(egg_temp).state > 38.0
#                then:
#                  - switch.turn_on: fan
#                  - switch.turn_off: heating_relay
#                else:
#                  - switch.turn_on: heating_relay
#                  - switch.turn_off: fan


#fan:
#  - plattform:
#    name: Fresh air fan
#    restore_mode: RESTORE_DEFAULT_ON
    

#sensor:
#  - platform: pulse_counter
#    pin: GPIO13
#    name: PWM Fan RPM
#    id: fan_pulse
#    unit_of_measurement: 'RPM'
#    filters:
#      - multiply: 0.5
#    count_mode:
#      rising_edge: INCREMENT
#      falling_edge: DISABLE
#    update_interval: 3s

#output:
#  - platform: ledc
#    pin: GPIO12
#    frequency: 10000 Hz
#    id: fanhub_pwm

#fan:
#  - platform: speed
#    output: fanhub_pwm
#    name: "PWM Fan"
